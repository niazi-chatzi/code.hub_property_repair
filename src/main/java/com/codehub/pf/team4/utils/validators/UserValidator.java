package com.codehub.pf.team4.utils.validators;import com.codehub.pf.team4.enums.HouseType;import com.codehub.pf.team4.forms.UserForm;import com.codehub.pf.team4.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import org.springframework.validation.Errors;import org.springframework.validation.Validator;import java.util.Arrays;import java.util.Optional;import java.util.regex.Pattern;@Componentpublic class UserValidator implements Validator {    private final String PASSWORD = "password";    @Autowired    private UserService userService;    @Override    public boolean supports(Class<?> aClass) {        return UserForm.class.isAssignableFrom(aClass);    }    @Override    public void validate(Object target, Errors errors) {        UserForm userForm = (UserForm) target;        // to avoid null pointer        if (userForm.getId() == null) userForm.setId("");        if (userForm.getPassword() == null) userForm.setPassword("");        // check if user with same email or afm exist and id == null so its CREATE OPERATION        if (doesExist("email", userForm.getEmail())) {            if (userForm.getId().isBlank()) errors.rejectValue("email", "email.exists");            else if (!userService.findUserById(Long.parseLong(userForm.getId())).get().getEmail().equals(userForm.getEmail())){                errors.rejectValue("email", "email.exists");            }        }       if (doesExist("afm", userForm.getAfm())) {           if (userForm.getId().isBlank()) errors.rejectValue("afm", "afm.exists");           else if (!userService.findUserById(Long.parseLong(userForm.getId())).get().getAfm().equals(userForm.getAfm())) {               errors.rejectValue("afm", "afm.exists");           }       }        // UPDATE RELATED > Check if user exists before update        if (!userForm.getId().isBlank()) {            if (!doesExist("id", userForm.getId())) { errors.rejectValue("id", "user.dont.exists"); }        }        // CREATE and UPDATE RELATED > Validate the password        passwordValidation(userForm, errors);    }    private boolean doesExist(String field, String value) {        if (field.equalsIgnoreCase("email")) {            if(!value.isBlank()) { return userService.findUserByEmail(value).isPresent(); }        } else if (field.equalsIgnoreCase("afm")) {            if (value != null) {                if (!value.isBlank() && isNumeric(value)) {                    try {                        return userService.findUserByAfm(value).isPresent();                    } catch(Exception exc){}                }            }        } else if (field.equalsIgnoreCase("id")) {            if (!value.isBlank()) { return userService.findUserById(Long.parseLong(value)).isPresent(); }        }        return false;    }    // simple function to check if string is numeric or not    public static boolean isNumeric(String toBeChecked) {        return toBeChecked.chars().allMatch(Character::isDigit);    }    // Manual password evaluation | Using the same form as creation and update so we have to do this way so we dont get conflict    // with the regular form validation    private void passwordValidation(UserForm userForm, Errors errors) {        if (!userForm.getId().isBlank()) { // is update related            if (doesExist("id", userForm.getId())) { // does the user exist                if (userForm.getPassword().isBlank()) return; // if user update and NO password change dont do nothing            }        }        passwordValidationForUserCreation(userForm.getPassword(), errors); // user creation password validation handler    }    private boolean isPasswordValid(String password) {        // Password Validation Pattern: Password must contain capital letter, lowercase letter, number and special characters        // and the length must be between 8 and 25        Pattern passwordPattern = Pattern.compile("^(?=.*[A-Z])(?=.*[!@#$&*\\-._+])(?=.*[0-9])(?=.*[a-z]).{8,25}$");        return passwordPattern.matcher(password).matches();    }    // Password Validation handler for user/owner creation    private void passwordValidationForUserCreation(String password, Errors errors) {        if (password.isBlank()) errors.rejectValue(PASSWORD, "user.password.not.empty");        if (!isPasswordValid(password)) errors.rejectValue(PASSWORD, "user.password.pattern.dont.match");        if (password.length() < 8 || password.length() > 25) errors.rejectValue(PASSWORD, "user.password.size.error");    }    public static boolean isValidAfm(String afm) {        return Pattern.compile("^[0-9]{9}$").matcher(afm).matches();    }    public static boolean isValidEmail(String email) {        return Pattern.compile("^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{1,63}$").matcher(email).matches();    }}